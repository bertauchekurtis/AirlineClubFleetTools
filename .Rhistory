View(long)
library(stringr)
data <- read.csv("C:/Users/kurti/Downloads/Airline Club Ultimate Spreadsheet - Airplanes (MFC).csv")
data$Fuelburn <- str_remove_all(data$Fuelburn, "/min")
data$Fuelburn <- substring(data$Fuelburn, 2)
data$Capacity <- str_remove_all(data$Capacity, " pax")
data$Fuelburn <- strtoi(data$Fuelburn)
data$Capacity <- strtoi(data$Capacity)
data$Speed <- str_remove_all(data$Speed, "km/h")
data$Speed <- strtoi(data$Speed)
data$Range <- str_remove_all(data$Range, "km")
data$Range <- strtoi(data$Range)
data$Price <- str_remove_all(data$Price, ",")
data$Price <- substring(data$Price, 2)
data$Price <- strtoi(data$Price)
data$Id <- NULL
data$Airplanetype <- NULL
data$Turnaroundtime <- NULL
data$Runwayrequirement <- NULL
data$Badconditionthreshold <- NULL
data$Criticalconditionthreshold <- NULL
data$Constructiontime <- NULL
data$Imageurl <- NULL
data$Countrycode <- NULL
data$Manufacturer <- NULL
data$paxOverFuel <- data$Capacity / data$Fuelburn
data$paxOverFuelbySpeed <- (data$Capacity * data$Speed) / data$Fuelburn
data$plusDepreciate <- data$paxOverFuelbySpeed * data$LifeSpan
data$plusDepreciate <- data$plusDepreciate / data$Price
View(data)
data$plusDepreciate <- data$paxOverFuelbySpeed * strtoi(data$LifeSpan)
data$Lifespan <- str_remove_all(data$Lifespan, "weeks")
data$plusDepreciate <- data$paxOverFuelbySpeed * strtoi(data$LifeSpan)
library(stringr)
data <- read.csv("C:/Users/kurti/Downloads/Airline Club Ultimate Spreadsheet - Airplanes (MFC).csv")
data$Fuelburn <- str_remove_all(data$Fuelburn, "/min")
data$Fuelburn <- substring(data$Fuelburn, 2)
data$Capacity <- str_remove_all(data$Capacity, " pax")
data$Fuelburn <- strtoi(data$Fuelburn)
data$Capacity <- strtoi(data$Capacity)
data$Speed <- str_remove_all(data$Speed, "km/h")
data$Speed <- strtoi(data$Speed)
data$Range <- str_remove_all(data$Range, "km")
data$Range <- strtoi(data$Range)
data$Price <- str_remove_all(data$Price, ",")
data$Price <- substring(data$Price, 2)
data$Price <- strtoi(data$Price)
data$Id <- NULL
data$Lifespan <- str_remove_all(data$Lifespan, " weeks")
data$Airplanetype <- NULL
data$Turnaroundtime <- NULL
data$Runwayrequirement <- NULL
data$Badconditionthreshold <- NULL
data$Criticalconditionthreshold <- NULL
data$Constructiontime <- NULL
data$Imageurl <- NULL
data$Countrycode <- NULL
data$Manufacturer <- NULL
data$paxOverFuel <- data$Capacity / data$Fuelburn
data$paxOverFuelbySpeed <- (data$Capacity * data$Speed) / data$Fuelburn
data$plusDepreciate <- data$paxOverFuelbySpeed * strtoi(data$LifeSpan)
typeof(data$Lifespan)
data$Lifespan <- strtoi(data$Lifespan)
typeof(data$Lifespan)
data$plusDepreciate <- data$paxOverFuelbySpeed * data$LifeSpan
data$plusDepreciate <- data$paxOverFuelbySpeed * data$Lifespan
data$plusDepreciate <- data$plusDepreciate / data$Price
mid <- data[which(str_detect(data$Family, "Airbus A320")),]
mid <- rbind(mid, data[which(str_detect(data$Family, "Boeing 737")),])
mid <- rbind(mid, data[which(str_detect(data$Family, "Boeing 757")),])
mid <- rbind(mid, data[which(str_detect(data$Family, "Airbus A220")),])
mid <- rbind(mid, data[which(str_detect(data$Name, "Embraer E195-E2")),])
long <- data[which(str_detect(data$Family, "Airbus A330")),]
long <- rbind(long, data[which(str_detect(data$Family, "Airbus A350")),])
long <- rbind(long, data[which(str_detect(data$Family, "Airbus A380")),])
long <- rbind(long, data[which(str_detect(data$Family, "Airbus A340")),])
long <- rbind(long, data[which(str_detect(data$Family, "Boeing 767")),])
long <- rbind(long, data[which(str_detect(data$Family, "Boeing 777")),])
long <- rbind(long, data[which(str_detect(data$Family, "Boeing 787")),])
long <- rbind(long, data[which(str_detect(data$Family, "Boeing 747")),])
long <- rbind(long, data[which(str_detect(data$Family, "Airbus A300/A310")),])
short <- data[which(str_detect(data$Family, "Embraer ERJ")),]
short <- rbind(short, data[which(str_detect(data$Family, "ATR-Regional")),])
short <- rbind(short, data[which(str_detect(data$Family, "BAe 146")),])
short <- rbind(short, data[which(str_detect(data$Family, "Bombardier CRJ")),])
short <- rbind(short, data[which(str_detect(data$Family, "De Havilland Canada DHC")),])
short <- rbind(short, data[which(str_detect(data$Family, "Embraer E-Jet E2")),])
b737 <- data[which(str_detect(data$Family, "Boeing 737")),]
b737 <- rbind(b737, data[which(str_detect(data$Family, "Boeing 757")),])
boeing <- data[which(str_detect(data$Family, "Boeing")),]
newTry <- data[which(data$Capacity > 155 & data$Capacity < 201),]
small <- data[which(data$Capacity < 51),]
lhrRange <- data[which(data$Range > 8316),]
cap <- data.frame(Name = c("Embraer E175-E2 (Eco)",
"Embraer E175-E2 (Bus)",
"Boeing 737 MAX 7",
"Boeing 737 MAX 9",
"Boeing 787-8 Dreamliner",
"Boeing 787-9 Dreamliner",
"Boeing 787-10 Dreamliner",
"Boeing 777-8"),
Economy_Capacity = c(63,
58,
127,
170,
185,
220,
265,
325),
Business_Capacity = c(10,
12,
18,
24,
26,
32,
38,
46))
cap$Economy_Capacity_2 <- cap$Economy_Capacity * 2
cap$Business_Capacity_2 <- cap$Business_Capacity * 2
cap$Economy_Capacity_3 <- cap$Economy_Capacity * 3
cap$Business_Capacity_3 <- cap$Business_Capacity * 3
cap$Economy_Capacity_4 <- cap$Economy_Capacity * 4
cap$Business_Capacity_4 <- cap$Business_Capacity * 4
cap$Economy_Capacity_5 <- cap$Economy_Capacity * 5
cap$Business_Capacity_5 <- cap$Business_Capacity * 5
cap$Economy_Capacity_6 <- cap$Economy_Capacity * 6
cap$Business_Capacity_6 <- cap$Business_Capacity * 6
cap$Economy_Capacity_7 <- cap$Economy_Capacity * 7
cap$Business_Capacity_7 <- cap$Business_Capacity * 7
cap$Economy_Capacity_8 <- cap$Economy_Capacity * 8
cap$Business_Capacity_8 <- cap$Business_Capacity * 8
cap$Economy_Capacity_9 <- cap$Economy_Capacity * 9
cap$Business_Capacity_9 <- cap$Business_Capacity * 9
cap$Economy_Capacity_10 <- cap$Economy_Capacity * 10
cap$Business_Capacity_10 <- cap$Business_Capacity * 10
cap$Economy_Capacity_11 <- cap$Economy_Capacity * 11
cap$Business_Capacity_11 <- cap$Business_Capacity * 11
cap$Economy_Capacity_12 <- cap$Economy_Capacity * 12
cap$Business_Capacity_12 <- cap$Business_Capacity * 12
cap$Economy_Capacity_13 <- cap$Economy_Capacity * 13
cap$Business_Capacity_13 <- cap$Business_Capacity * 13
cap$Economy_Capacity_14 <- cap$Economy_Capacity * 14
cap$Business_Capacity_14 <- cap$Business_Capacity * 14
cap$Economy_Capacity_15 <- cap$Economy_Capacity * 15
cap$Business_Capacity_15 <- cap$Business_Capacity * 15
View(long)
results <- read.csv(file = "C:/Users/kurti/Downloads/baselineResults.txt")
View(results)
?read.csv
results <- read.csv(file = "C:/Users/kurti/Downloads/baselineResults.txt",)
results <- read.csv(file = "C:/Users/kurti/Downloads/baselineResults.txt",)
results <- read.csv(file = "C:/Users/kurti/Downloads/baselineResults.txt",row.names = FALSE)
results <- read.csv(file = "C:/Users/kurti/Downloads/baselineResults.txt",row.names = NULL)
colnames(results) <- c("Model", "Accuracy", "Specificity", "False Positive Rate", "False Negative Rate", "Positive Predictive value", "Negative Predictive Value", "Area under ROC", "Positive Likelihood Ratio", "Negative Likelihood Ratio", "Diagnostic Odds", "F1", "F2", "Youden", "why")
resultss <- read.csv(file = "C:/Users/kurti/Downloads/baselineResults.txt")
View(resultss)
results <- read.csv(file = "C:/Users/kurti/Downloads/baselineResults.txt",row.names = NULL)
colnames(resultss) <- c("Accuracy", "Specificity", "FalsePosRate", "FalseNegRate", "PosPredVal", "NegPredVal", "ROC", "PosLike", "NegLike", "Dianostic", "F1", "f2", "Youden")
results <- read.csv(file = "C:/Users/kurti/Downloads/baselineResults.txt",row.names = NULL)
results <- read.csv(file = "C:/Users/kurti/Downloads/baselineResults_SMOTE.txt",row.names = NULL)
# ms stats go brrr
library(stringr) # i want the str_detect function
data <- read.csv(file = "C:/Users/kurti/Downloads/ccRCC_DIA_peptide.tsv", # you should change this filepath
sep = "\t")
# make an empty data frame
finalDataFrame <- data.frame(PeptideSequence = character(),
PrecursorCharge =double(),
Fragmentation = character(),
ProductCharge = double(),
IsotopeLabelType = character(),
Condition = character(),
BioReplicate = character(),
Run = integer(),
Intensity = double())
# loop de loop
for(rowNumber in 1:nrow(data))
{
row <- data[rowNumber,]
# pure madness, a double nested loop!
for(colNumber in 4:ncol(data)) # notice how we start at col 4
{
natLabel <- "" # this goes here for scope reasons
if(str_detect(colnames(data)[colNumber], "_NAT.mzML")) # figures out if this is a nat or tumor column
{
natLabel <- "Natural"
}
else
{
natLabel <- "Tumor"
}
newRow <- data.frame(PeptideSequence = c(row[1]),
PrecursorCharge = c(NA),
Fragmentation = c("y5"),
ProductCharge = c(NA),
IsotopeLabelType = c("L"),
Condition = c(natLabel),
BioReplicate = c(colnames(data)[colNumber]),
Run = c(colNumber - 3),
Intensity = c(data[rowNumber, colNumber]))
finalDataFrame <- rbind(finalDataFrame, newRow)
}
cat("Finished row: ", rowNumber, "\n")
}
68 * 197
View(data)
row <- data[1]
View(row)
row <- data[1,]
View(row)
lotsOfDfs <- pbapply(data, 1, processRow) # IMPORTANT! If you don't have/don't want the pbapply library, swap the "pbapply" for "apply"
library(pbapply) # this is an OPTIONAL LIBRARY (If you don't want it/don't have it, that's fine)
# make a function that processes one row from the data set
processRow <- function(row)
{
# an empty data frame for all of the entries from this row
thisRowDf <- data.frame(PeptideSequence = character(),
PrecursorCharge = double(),
Fragmentation = character(),
ProductCharge = double(),
IsotopeLabelType = character(),
Condition = character(),
BioReplicate = character(),
Run = integer(),
Intensity = double())
# now, we loop through each of the columns for this row
for(colNumber in 4:ncol(data))
{
natLabel <- ""
if(str_detect(colnames(data)[colNumber], "_NAT.mzML")) # figures out if this is a nat or tumor column
{
natLabel <- "Natural"
}
else
{
natLabel <- "Tumor"
}
# put this row/column combo into a nice row of it's own
newRow <- data.frame(PeptideSequence = c(row[1]),
PrecursorCharge = c(NA),
Fragmentation = c("y5"),
ProductCharge = c(NA),
IsotopeLabelType = c("L"),
Condition = c(natLabel),
BioReplicate = c(colnames(data)[colNumber]),
Run = c(colNumber - 3),
Intensity = c(row[colNumber]))
# then append this row to the main row for this row (that's a lot of rows)
thisRowDf <- rbind(thisRowDf, newRow)
}
return(thisRowDf)
}
lotsOfDfs <- pbapply(data, 1, processRow) # IMPORTANT! If you don't have/don't want the pbapply library, swap the "pbapply" for "apply"
View(finalDataFrame)
data <- data[1:10,]
lotsOfDfs <- pbapply(data, 1, processRow) # IMPORTANT! If you don't have/don't want the pbapply library, swap the "pbapply" for "apply"
View(lotsOfDfs)
data <- lotsOfDfs[[1]]
View(data)
View(lotsOfDfs)
library(stringr)
data <- read.csv("C:/Users/kurti/Downloads/Airline Club Ultimate Spreadsheet - Airplanes (MFC).csv")
data$Fuelburn <- str_remove_all(data$Fuelburn, "/min")
data$Fuelburn <- substring(data$Fuelburn, 2)
data$Capacity <- str_remove_all(data$Capacity, " pax")
data$Fuelburn <- strtoi(data$Fuelburn)
data$Capacity <- strtoi(data$Capacity)
data$Speed <- str_remove_all(data$Speed, "km/h")
data$Speed <- strtoi(data$Speed)
data$Range <- str_remove_all(data$Range, "km")
data$Range <- strtoi(data$Range)
data$Price <- str_remove_all(data$Price, ",")
data$Price <- substring(data$Price, 2)
data$Price <- strtoi(data$Price)
data$Id <- NULL
data$Lifespan <- str_remove_all(data$Lifespan, " weeks")
data$Lifespan <- strtoi(data$Lifespan)
data$Airplanetype <- NULL
data$Turnaroundtime <- NULL
data$Runwayrequirement <- NULL
data$Badconditionthreshold <- NULL
data$Criticalconditionthreshold <- NULL
data$Constructiontime <- NULL
data$Imageurl <- NULL
data$Countrycode <- NULL
data$Manufacturer <- NULL
data$paxOverFuel <- data$Capacity / data$Fuelburn
data$paxOverFuelbySpeed <- (data$Capacity * data$Speed) / data$Fuelburn
data$plusDepreciate <- data$paxOverFuelbySpeed * data$Lifespan
data$plusDepreciate <- data$plusDepreciate / data$Price
mid <- data[which(str_detect(data$Family, "Airbus A320")),]
mid <- rbind(mid, data[which(str_detect(data$Family, "Boeing 737")),])
mid <- rbind(mid, data[which(str_detect(data$Family, "Boeing 757")),])
mid <- rbind(mid, data[which(str_detect(data$Family, "Airbus A220")),])
mid <- rbind(mid, data[which(str_detect(data$Name, "Embraer E195-E2")),])
88 to 200
long <- data[which(str_detect(data$Family, "Airbus A330")),]
long <- rbind(long, data[which(str_detect(data$Family, "Airbus A350")),])
long <- rbind(long, data[which(str_detect(data$Family, "Airbus A380")),])
long <- rbind(long, data[which(str_detect(data$Family, "Airbus A340")),])
long <- rbind(long, data[which(str_detect(data$Family, "Boeing 767")),])
long <- rbind(long, data[which(str_detect(data$Family, "Boeing 777")),])
long <- rbind(long, data[which(str_detect(data$Family, "Boeing 787")),])
long <- rbind(long, data[which(str_detect(data$Family, "Boeing 747")),])
long <- rbind(long, data[which(str_detect(data$Family, "Airbus A300/A310")),])
short <- data[which(str_detect(data$Family, "Embraer ERJ")),]
short <- rbind(short, data[which(str_detect(data$Family, "ATR-Regional")),])
short <- rbind(short, data[which(str_detect(data$Family, "BAe 146")),])
short <- rbind(short, data[which(str_detect(data$Family, "Bombardier CRJ")),])
short <- rbind(short, data[which(str_detect(data$Family, "De Havilland Canada DHC")),])
short <- rbind(short, data[which(str_detect(data$Family, "Embraer E-Jet E2")),])
b737 <- data[which(str_detect(data$Family, "Boeing 737")),]
b737 <- rbind(b737, data[which(str_detect(data$Family, "Boeing 757")),])
boeing <- data[which(str_detect(data$Family, "Boeing")),]
newTry <- data[which(data$Capacity > 155 & data$Capacity < 201),]
small <- data[which(data$Capacity < 51),]
lhrRange <- data[which(data$Range > 8316),]
cap <- data.frame(Name = c("Embraer E175-E2 (Eco)",
"Embraer E175-E2 (Bus)",
"Boeing 737 MAX 7",
"Boeing 737 MAX 9",
"Boeing 787-8 Dreamliner",
"Boeing 787-9 Dreamliner",
"Boeing 787-10 Dreamliner",
"Boeing 777-8"),
Economy_Capacity = c(63,
58,
127,
170,
185,
220,
265,
325),
Business_Capacity = c(10,
12,
18,
24,
26,
32,
38,
46))
cap$Economy_Capacity_2 <- cap$Economy_Capacity * 2
cap$Business_Capacity_2 <- cap$Business_Capacity * 2
cap$Economy_Capacity_3 <- cap$Economy_Capacity * 3
cap$Business_Capacity_3 <- cap$Business_Capacity * 3
cap$Economy_Capacity_4 <- cap$Economy_Capacity * 4
cap$Business_Capacity_4 <- cap$Business_Capacity * 4
cap$Economy_Capacity_5 <- cap$Economy_Capacity * 5
cap$Business_Capacity_5 <- cap$Business_Capacity * 5
cap$Economy_Capacity_6 <- cap$Economy_Capacity * 6
cap$Business_Capacity_6 <- cap$Business_Capacity * 6
cap$Economy_Capacity_7 <- cap$Economy_Capacity * 7
cap$Business_Capacity_7 <- cap$Business_Capacity * 7
cap$Economy_Capacity_8 <- cap$Economy_Capacity * 8
cap$Business_Capacity_8 <- cap$Business_Capacity * 8
cap$Economy_Capacity_9 <- cap$Economy_Capacity * 9
cap$Business_Capacity_9 <- cap$Business_Capacity * 9
cap$Economy_Capacity_10 <- cap$Economy_Capacity * 10
cap$Business_Capacity_10 <- cap$Business_Capacity * 10
cap$Economy_Capacity_11 <- cap$Economy_Capacity * 11
cap$Business_Capacity_11 <- cap$Business_Capacity * 11
cap$Economy_Capacity_12 <- cap$Economy_Capacity * 12
cap$Business_Capacity_12 <- cap$Business_Capacity * 12
cap$Economy_Capacity_13 <- cap$Economy_Capacity * 13
cap$Business_Capacity_13 <- cap$Business_Capacity * 13
cap$Economy_Capacity_14 <- cap$Economy_Capacity * 14
cap$Business_Capacity_14 <- cap$Business_Capacity * 14
cap$Economy_Capacity_15 <- cap$Economy_Capacity * 15
cap$Business_Capacity_15 <- cap$Business_Capacity * 15
View(data)
View(long)
setwd("C:/Users/kurti/Desktop/AirlineClubFleetTools")
shiny::runApp()
?list.files
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
old <- read.csv("./FleetData/Mar-02-2023fleetReport.csv")
new <- read.csv("./FleetData/Mar-16-2023fleetReport.csv")
old$Airline <- NULL
new$Airline <- NULL
oldTotal <- sum(old$Total)
newTotal <- sum(new$Total)
old$Total <- NULL
new$Total <- NULL
old <- old[, order(names(old))]
new <- new[, order(names(new))]
oldCondensed <- data.frame(Airplane = character(),
Total = integer())
newCondensed <- data.frame(Airplane = character(),
Total = integer())
for(i in 1:ncol(old))
{
print(colnames(old)[i])
oldCondensed <- rbind(oldCondensed, c(colnames(old)[i], sum(old[,i])))
newCondensed <- rbind(newCondensed, c(colnames(new)[i], sum(new[,i])))
}
old <- read.csv("./FleetData/Mar-02-2023fleetReport.csv")
new <- read.csv("./FleetData/Mar-16-2023fleetReport.csv")
old$Airline <- NULL
new$Airline <- NULL
oldTotal <- sum(old$Total)
newTotal <- sum(new$Total)
old$Total <- NULL
new$Total <- NULL
setwd("C:/Users/kurti/Desktop/ACClubFleet")
old <- read.csv("./FleetData/Mar-02-2023fleetReport.csv")
new <- read.csv("./FleetData/Mar-16-2023fleetReport.csv")
old$Airline <- NULL
new$Airline <- NULL
oldTotal <- sum(old$Total)
newTotal <- sum(new$Total)
old$Total <- NULL
new$Total <- NULL
old <- old[, order(names(old))]
new <- new[, order(names(new))]
oldCondensed <- data.frame(Airplane = character(),
Total = integer())
newCondensed <- data.frame(Airplane = character(),
Total = integer())
for(i in 1:ncol(old))
{
print(colnames(old)[i])
oldCondensed <- rbind(oldCondensed, c(colnames(old)[i], sum(old[,i])))
newCondensed <- rbind(newCondensed, c(colnames(new)[i], sum(new[,i])))
}
colnames(oldCondensed) <- c("Aircraft", "Total")
colnames(newCondensed) <- c("Aircraft", "Total")
changes <- newCondensed
changes$Total <- strtoi(changes$Total) - strtoi(oldCondensed$Total)
changes$Abs <- abs(changes$Total)
changes <- changes[order(changes$Abs, decreasing = TRUE),]
oldCondensed <- oldCondensed[order(strtoi(oldCondensed$Total), decreasing = TRUE),]
newCondensed <- newCondensed[order(strtoi(newCondensed$Total), decreasing = TRUE),]
final <- changes
final$Abs <- NULL
colnames(final) <- c("Top Changing Models", "Change")
final$PreviousTopModels <- oldCondensed$Aircraft
final$PreviousTopModelsCount <- oldCondensed$Total
final$CurrentTopModels <- newCondensed$Aircraft
final$CurrentTopModelsCount <- newCondensed$Total
cat("Old Total Owned:", oldTotal, "\n", "New Total Owned:", newTotal, "\n", "Change: ", newTotal - oldTotal)
print(head(final, 20))
setwd("C:/Users/kurti/Desktop/AirlineClubFleetTools")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?substr
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?pie
runApp()
runApp()
runApp()
runApp()
runApp()
?req
runApp()
runApp()
runApp()
runApp()
runApp()
?pie
runApp()
runApp()
?par
runApp()
runApp()
runApp()
runApp()
runApp()
?pie
runApp()
?text
?pie
runApp()
runApp()
